# 1. 用户专属设置 (替代 localStorage 中的部分 user 对象信息)
# 这个模型用来存储与单个登录用户关联的数据。
# 身份验证（用户名/密码）由 AWS Cognito 处理。

type UserSettings @model @auth(rules: [
  # 规则：只有记录的所有者（创建者，即登录用户）可以进行所有操作 (CRUD)
  { allow: owner }
]) {
  # id 会自动关联到 Cognito 用户的唯一标识符 (sub)
  id: ID!

  # 存储用户的角色，这部分信息从旧的 user 对象迁移过来
  role: String

  # 存储用户专属的 API Keys，同样从旧的 user 对象迁移
  # 我们使用一个嵌套类型来组织这些 keys
  apiKeys: UserApiKeys
}

# 嵌套类型，用于组织用户的 API Keys
type UserApiKeys {
  userStory: String
  userManual: String
  requirementsAnalysis: String
}


# 2. 全局应用配置 (替代 localStorage 中的 global_config)
# 这个模型用来存储所有用户共享的配置信息。

type GlobalConfig @model @auth(rules: [
  # 规则1：允许任何通过 Cognito 登录的用户读取 (read) 配置
  { allow: private, provider: userPools, operations: [read] },
  # 规则2：只允许属于 "Admins" 用户组的用户创建、更新、删除 (create, update, delete) 配置
  # 你需要在 Cognito User Pool 中创建一个名为 "Admins" 的用户组
  { allow: groups, groups: ["Admins"], operations: [create, update, delete] }
]) {
  # 我们假设全局配置只有一条记录，并为其使用一个固定的、已知的 ID
  # 你的前端代码在读取或更新时需要知道这个 ID，例如 "GLOBAL"
  id: ID!

  # 存储全局 API Endpoints
  # 使用嵌套类型组织
  apiEndpoints: GlobalApiEndpoints
}

# 嵌套类型，用于组织全局 API Endpoints
type GlobalApiEndpoints {
  userStory: String
  userManual: String
  requirementsAnalysis: String
}

