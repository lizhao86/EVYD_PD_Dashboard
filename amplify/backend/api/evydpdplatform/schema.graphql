# UserSettings Model - 存储用户特定设置
type UserSettings @model @auth(rules: [
  # 只有所有者（创建记录的登录用户）可以操作
  { allow: owner, operations: [create, read, update, delete] }
]) {
  id: ID!           # 建议在创建时将此ID设为用户的Cognito sub/username，以便直接查询
  role: String!       # "admin" 或 "user"
  language: String    # 用户偏好语言 (例如, 'zh-CN', 'en-US')
  # owner 字段隐式添加，并由 {allow: owner} 规则使用
}

# Application Model - 代表应用，用于关联 API Key 和全局配置中的 API 地址
type Application @model @auth(rules: [
  # 'Admin' 组的用户可以管理应用（创建、读、更新、删除）
  { allow: groups, groups: ["Admin"], operations: [create, read, update, delete] },
  # 所有登录用户都可以读取应用列表（例如，为了关联 API Key）
  { allow: private, provider: userPools, operations: [read] }
]) {
  id: ID!
  name: String!       # 应用名称
  description: String # 应用描述
}

# UserApplicationApiKey Model - 存储特定用户对特定应用的 API Key
type UserApplicationApiKey @model @auth(rules: [
  # 只有所有者（创建此 API Key 条目的用户）可以管理它
  { allow: owner, operations: [create, read, update, delete] }
]) {
  id: ID!
  # 使用 @index 可以在未来按 applicationID 查询（需要指定 sort key fields）
  applicationID: ID! @index(name: "byApplication", sortKeyFields: ["owner"]) 
  apiKey: String!     # 用户针对该应用的 API Key
  owner: String       # 显式定义 owner 字段，供 @index 使用（由 @auth 自动管理）
}

# Conversation Model - 存储对话数据
type Conversation @model @auth(rules: [
  { allow: owner, operations: [create, read, update, delete] }
]) {
  id: ID!
  # owner 字段隐式添加
  title: String
  messages: AWSJSON   # 将消息数组存储为 JSON 字符串
  appType: String     # 添加应用类型字段，用于区分不同应用的对话：'chat', 'ux-design', 'requirement-analysis'
  createdAt: AWSDateTime # 显式定义创建时间字段，用于排序
  updatedAt: AWSDateTime # 显式定义更新时间字段
  # 添加索引以便于根据应用类型查询
  @index(name: "byAppType", sortKeyFields: ["createdAt"], queryField: "conversationsByAppType")
}

# GlobalConfig Model - 存储全局配置，例如不同应用的 API 地址
type GlobalConfig @model @auth(rules: [
  # 所有登录用户可读
  { allow: private, provider: userPools, operations: [read] },
  # 'Admin' 组的用户可以管理全局配置 (添加了 read)
  { allow: groups, groups: ["Admin"], operations: [create, update, delete, read] }
]) {
  id: ID!
  configKey: String!    # 配置键 (例如, Application ID 或应用名称)
  configValue: String!  # 配置值 (例如, API 地址 URL)
  applicationType: String! # 应用类型，'chat' 或 'workflow'
}

# --- 注意事项 ---
# 1. 对于涉及 `groups: ["Admin"]` 的 @auth 规则:
#    - 你需要在第一次 `amplify push` 成功后，去 AWS Cognito 控制台手动创建一个名为 "Admin" 的用户组。
#    - 将需要管理员权限的用户添加到这个 "Admin" 组中。
# 2. UserSettings 的 `id` 字段:
#    - 如果你希望直接通过用户的 Cognito ID (sub 或 username) 查询设置，
#      最佳实践是在前端创建 UserSettings 记录时，手动将 `id` 设置为用户的 Cognito ID。
#    - 如果不这样做，Amplify 会自动生成一个随机 ID，你需要先查询 owner 字段等于 Cognito ID 的记录，再获取其 ID。
#      使用 Cognito ID 作为主键通常更方便，但需要前端配合。现在这个 Schema 使用自动 ID。