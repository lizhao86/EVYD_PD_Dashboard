/**
 * EVYD产品经理AI工作台
 * 云存储服务模块 (Powered by AWS Amplify)
 */

import { generateClient } from 'aws-amplify/api';
import { fetchAuthSession, getCurrentUser } from 'aws-amplify/auth';
// Adjust the path based on your project structure if src/graphql is incorrect
import * as queries from '../../src/graphql/queries';
import * as mutations from '../../src/graphql/mutations';

const client = generateClient();

// --- User Settings ---

/**
 * 获取当前登录用户的设置 (role, apiKeys).
 * @returns {Promise<object|null>} 用户设置对象或 null (如果未登录或未找到)
 */
export async function getCurrentUserSettings() {
    try {
        // Use getCurrentUser to ensure we operate on the authenticated user
        const { userId } = await getCurrentUser(); // userId is the Cognito 'sub'

        console.log(`Fetching settings for user ID: ${userId}`);

        const result = await client.graphql({
            query: queries.getUserSettings, // Assumes query name generated by Amplify
            variables: { id: userId }
        });

        console.log("Fetched UserSettings:", result.data.getUserSettings);
        return result.data.getUserSettings; // Returns the settings object or null if not found

    } catch (error) {
        // Handle cases like user not authenticated or network errors gracefully
        if (error.name === 'UserUnAuthenticatedException' || error.message === 'User is not authenticated') {
           console.log("User not logged in, cannot fetch settings.");
        } else {
            // Log other errors, e.g., network issues or if the record truly doesn't exist yet
            console.error('Error fetching user settings:', error);
        }
        return null;
    }
}

/**
 * 创建或更新当前登录用户的设置.
 * @param {object} settings - 包含 role 和 apiKeys 的对象.
 * @param {string} settings.role - 用户角色.
 * @param {object} settings.apiKeys - 包含 API 密钥的对象.
 * @param {string} [settings.apiKeys.userStory]
 * @param {string} [settings.apiKeys.userManual]
 * @param {string} [settings.apiKeys.requirementsAnalysis]
 * @returns {Promise<object|null>} 更新/创建后的用户设置对象或 null (如果出错)
 */
export async function saveCurrentUserSetting(settings) {
    try {
        const { userId } = await getCurrentUser(); // Ensure user is authenticated

        // Prepare input data, providing defaults for nested objects/keys if necessary
        const inputData = {
            id: userId, // Use the authenticated user's ID
            role: settings.role || 'user', // Default role if not provided
            apiKeys: {
                // Provide defaults to ensure the fields exist in the input
                userStory: settings.apiKeys?.userStory ?? '',
                userManual: settings.apiKeys?.userManual ?? '',
                requirementsAnalysis: settings.apiKeys?.requirementsAnalysis ?? ''
            }
            // 'owner' field is handled automatically by Amplify based on @auth rule
        };

        console.log("Attempting to save UserSettings for user:", userId);

        // Try to fetch existing settings to decide between create and update
        // Note: We could optimize this by directly attempting an update
        // and catching a specific "not found" error to trigger a create,
        // but this explicit check is clearer for now.
        const existingSettings = await client.graphql({
            query: queries.getUserSettings,
            variables: { id: userId }
        }).catch(err => {
            // Ignore "not found" style errors, but log others
            if (!err.errors || !err.errors.some(e => e.errorType === 'DynamoDB: ConditionalCheckFailedException' || e.message?.includes('Cannot return null for non-nullable type'))) {
                 console.warn('Could not fetch existing settings before save:', err);
            }
            return null; // Treat as non-existent on error
         });


        let result;
        if (existingSettings && existingSettings.data.getUserSettings) {
            // Update existing settings
            console.log('Updating UserSettings:', inputData);
            result = await client.graphql({
                query: mutations.updateUserSettings, // Assumes mutation name generated by Amplify
                variables: { input: inputData }
            });
            console.log("Update result:", result);
            return result.data.updateUserSettings;
        } else {
            // Create new settings
            console.log('Creating UserSettings:', inputData);
            result = await client.graphql({
                query: mutations.createUserSettings, // Assumes mutation name generated by Amplify
                variables: { input: inputData }
            });
             console.log("Create result:", result);
            return result.data.createUserSettings;
        }

    } catch (error) {
         if (error.name === 'UserUnAuthenticatedException' || error.message === 'User is not authenticated') {
           console.error("User not logged in, cannot save settings.");
        } else {
           console.error('Error saving user settings:', error);
        }
        return null;
    }
}


// --- Global Config ---

// Use a consistent, known ID for the single global configuration record
const GLOBAL_CONFIG_ID = "GLOBAL_CONFIG";

/**
 * 获取全局配置 (apiEndpoints).
 * @returns {Promise<object|null>} 全局配置对象或 null (如果未找到或出错)
 */
export async function getGlobalConfig() {
    console.log(`Fetching GlobalConfig with ID: ${GLOBAL_CONFIG_ID}`);
    try {
        const result = await client.graphql({
            query: queries.getGlobalConfig, // Assumes query name generated by Amplify
            variables: { id: GLOBAL_CONFIG_ID }
        });

        if (result.data.getGlobalConfig) {
            console.log("Fetched GlobalConfig:", result.data.getGlobalConfig);
            return result.data.getGlobalConfig;
        } else {
            console.warn(`GlobalConfig record with ID "${GLOBAL_CONFIG_ID}" not found.`);
            // Return a default structure or null, depending on application needs
            // Returning null might be clearer that it needs creation.
            return null;
             /* Or return a default structure:
             return {
                 id: GLOBAL_CONFIG_ID,
                 apiEndpoints: { userStory: '', userManual: '', requirementsAnalysis: '' }
             }; */
        }

    } catch (error) {
        console.error('Error fetching global config:', error);
        return null;
    }
}

/**
 * 保存全局配置 (需要管理员权限).
 * 注意：首次保存需要调用此函数来 *创建* 全局配置记录.
 * @param {object} config - 包含 apiEndpoints 的对象.
 * @param {object} config.apiEndpoints - 包含 API 端点 URL 的对象.
 * @param {string} [config.apiEndpoints.userStory]
 * @param {string} [config.apiEndpoints.userManual]
 * @param {string} [config.apiEndpoints.requirementsAnalysis]
 * @returns {Promise<object|null>} 更新/创建后的全局配置对象或 null (如果出错或权限不足)
 */
export async function saveGlobalConfig(config) {
    // Ensure the input structure is valid
    if (!config || !config.apiEndpoints) {
        console.error("Invalid global config format provided for saving.");
        return null;
    }

    const inputData = {
        id: GLOBAL_CONFIG_ID, // Always use the fixed ID
        apiEndpoints: {
            userStory: config.apiEndpoints.userStory ?? '',
            userManual: config.apiEndpoints.userManual ?? '',
            requirementsAnalysis: config.apiEndpoints.requirementsAnalysis ?? ''
        }
    };

    console.log("Attempting to save GlobalConfig:", inputData);

    try {
        // We'll attempt an update first. If it fails because the item doesn't exist
        // (ConditionalCheckFailedException), we then attempt a create.
        // This requires the @model's update mutation to have a condition check.
        // Alternatively, explicitly check if it exists first like in saveUserSettings.
        // For simplicity here, let's *assume* update might create if ID is provided
        // OR rely on a manual first-time creation / separate create function.
        // Let's refine this: Try `update`, if specific error -> `create`.

        let result;
        try {
            console.log('Attempting updateGlobalConfig...');
            result = await client.graphql({
                query: mutations.updateGlobalConfig, // Assumes mutation name generated by Amplify
                variables: { input: inputData },
                // authMode: 'AMAZON_COGNITO_USER_POOLS' // Explicitly set if needed
            });
            console.log("GlobalConfig updated successfully.");
            return result.data.updateGlobalConfig;

        } catch (updateError) {
             // Check if the error indicates the item doesn't exist (may vary slightly based on backend setup)
             // A common pattern for DynamoDB via AppSync might involve 'ConditionalCheckFailedException'
             const isNotFoundError = updateError.errors?.some(e => e.errorType?.includes('ConditionalCheckFailed') || e.message?.includes('conditional request failed'));

            if (isNotFoundError) {
                console.log('GlobalConfig not found, attempting createGlobalConfig...');
                // Item doesn't exist, try creating it
                result = await client.graphql({
                    query: mutations.createGlobalConfig, // Assumes mutation name generated by Amplify
                    variables: { input: inputData },
                    // authMode: 'AMAZON_COGNITO_USER_POOLS' // Explicitly set if needed
                });
                 console.log("GlobalConfig created successfully.");
                return result.data.createGlobalConfig;
            } else {
                // Rethrow other errors (like permissions errors)
                throw updateError;
            }
        }

    } catch (error) {
        // Catch errors from the create attempt or other errors from the update attempt
        console.error('Error saving global config (permissions?):', error);
        return null;
    }
}

// Removed the old Storage object and the Storage.init() call.
// Initialization (like ensuring GlobalConfig exists) should now be handled
// within the application logic, possibly after admin login. 